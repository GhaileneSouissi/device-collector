play.http.secret.key = "c0l1p05t3_1s_in_Pr0duct1on"

#Â Swagger specific configuration
api.version = "1.0"
play.modules.enabled += "task.TaskModule"

## Play Modules
# Play modules: https://playframework.com/documentation/latest/ModuleDirectory

play.server.pidfile.path=/dev/null


play {
  filters {
    headers.contentSecurityPolicy = "script-src 'self' 'unsafe-inline'"
    hosts.allowed = ["."]
    disabled += play.filters.csrf.CSRFFilter
  }


  http.filters = filters.Filters


  modules.enabled += "play.modules.swagger.SwaggerModule"

  server {
    http {
    idleTimeout = infinite
    }

    akka.default-host-header = ${?override-env.play.server.akka.default-host-header}
    akka {
          requestTimeout = infinite
          bindTimeout = 50000 seconds
          terminationTimeout = infinite
    }
  }
}

akka {
  loglevel = "WARNING"
  loglevel = ${?override-env.akka.loglevel}

  actor {
    default-dispatcher {
      executor = "thread-pool-executor"
      throughput = 1
      thread-pool-executor {
        fixed-pool-size = 10 # db conn pool (50) + number of cores (4) + housekeeping (1)
      }
    }
  }

  http {
    parsing {
      max-uri-length = 16k
    }
  }
}

common {

 schedular.interval= 5 minutes

  postgres = {
    //  connectionPool = "HikariCP" //use HikariCP for our connection pool
    dataSourceClass = "org.postgresql.ds.PGSimpleDataSource" //Simple datasource with no connection pooling. The connection pool has already been specified with HikariCP.
    properties = {
      serverName = "postgres"
      serverName = ${?override-env.mydb.properties.serverName}
      portNumber = "5432"
      portNumber = ${?override-env.mydb.properties.portNumber}
      databaseName = "db"
      databaseName = ${?override-env.mydb.properties.databaseName}
      user = "postgres"
      user = ${?override-env.mydb.properties.user}
      password = "example"
      password = ${?override-env.mydb.properties.password}
    }
    numThreads = 10
    numThreads = ${?override-env.postgres.numThreads}
  }

}

local = ${common} {}
remote = ${common} {}
